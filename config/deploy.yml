# Name of your application. Used to uniquely configure containers.
service: says-since-midzu
# Name of the container image.
image: dfigueroa/says-since-midzu
# Deploy to these servers.
servers:
  web:
    - ryumi
  worker:
    hosts:
      - ryumi
    cmd: bash -c "php artisan queue:work"

# Enable SSL auto certification via Let's Encrypt (and allow for multiple apps on one server).
# If using something like Cloudflare, it is recommended to set encryption mode
# in Cloudflare's SSL/TLS setting to "Full" to enable end-to-end encryption.
proxy:
  host: midzui.dmfigueroa.com
  app_port: 8080

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  server: docker.dmfigueroa.com
  username: dfigueroa

  # Always use an access token rather than real password (pulled from .kamal/secrets).
  password:
    - KAMAL_REGISTRY_PASSWORD

# Configure builder setup.
builder:
  arch: amd64

# Inject ENV variables into containers (secrets come from .kamal/secrets).
#
env:
  secret:
    - APP_NAME
    - APP_ENV
    - APP_KEY
    - APP_DEBUG
    - APP_TIMEZONE
    - APP_URL
    - APP_LOCALE
    - APP_FALLBACK_LOCALE
    - APP_FAKER_LOCALE
    - APP_MAINTENANCE_DRIVER
    - BCRYPT_ROUNDS
    - LOG_CHANNEL
    - LOG_STACK
    - LOG_DEPRECATIONS_CHANNEL
    - LOG_LEVEL
    - DB_CONNECTION
    - SESSION_DRIVER
    - SESSION_LIFETIME
    - SESSION_ENCRYPT
    - SESSION_PATH
    - SESSION_DOMAIN
    - BROADCAST_CONNECTION
    - QUEUE_CONNECTION
    - FILESYSTEM_DISK
    - CACHE_STORE
    - CACHE_PREFIX
    - TWITCH_CLIENT_ID
    - VITE_APP_NAME
    - TWITCH_CLIENT_SECRET


# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal logs -r job" will tail logs from the first server in the job section.
#
aliases:
  shell: app exec --interactive --reuse "bash"
  console: app exec --reuse -i "php artisan tinker"

# Use a different ssh user than root
#
# ssh:
#   user: app

# Use a persistent storage volume.
#
# volumes:
#   - "app_storage:/app/storage"

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
#
# asset_path: /app/public/assets

# Configure rolling deploys by setting a wait time between batches of restarts.
#
# boot:
#   limit: 10 # Can also specify as a percentage of total hosts, such as "25%"
#   wait: 2

# Use accessory services (secrets come from .kamal/secrets).
#
# accessories:
#   db:
#     image: mysql:8.0
#     host: 192.168.0.2
#     port: 3306
#     env:
#       clear:
#         MYSQL_ROOT_HOST: '%'
#       secret:
#         - MYSQL_ROOT_PASSWORD
#     files:
#       - config/mysql/production.cnf:/etc/mysql/my.cnf
#       - db/production.sql:/docker-entrypoint-initdb.d/setup.sql
#     directories:
#       - data:/var/lib/mysql
#   redis:
#     image: redis:7.0
#     host: 192.168.0.2
#     port: 6379
#     directories:
#       - data:/data
